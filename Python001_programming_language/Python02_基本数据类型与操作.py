# -*-coding: utf-8 -*-
"""
1、变量：
    a、理解
        * 变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间
        * 变量的值可以被读取和修改
    b、命名规则
        * 由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，不能以数字开头
        * 大小写敏感
        * 不能跟关键字（有特殊含义的单词，比如class、for、in等）和系统保留字（如函数、模块等的名字）冲突
2、数字及运算符：
    a、常见数字类型：int、float（不可变数据类型）
    b、常用运算符：
        * 赋值：=
        * 加减乘除：+ - * /
        * 求余数：%
        * 乘方：**
        * 修改运算优先级：()
        * 等于和不等于（返回True或False）：== !=
"""
a = 1
b = 1.0
c1 = "1.0"
d2 = [1, 2, 3]
e3 = (1, 2, 3)
f4 = {1: "a", 2: "b"}
#  type(变量名1,变量名2)：获取变量的数据类型
print(type(a), type(b), type(c1), type(d2), type(e3), type(f4))
"""
3、字符串（不可变数据类型）：
    \：转义符，比如\n代表换行
    r：忽略转义符
    +：拼接字符串
    索引：下标从左到右0开始，从右至左-1开始
    切片
"""
str_a = "abcdefg\n1234567!@#$%^&"  # 转移符号\后面加n(\n)为换行
str_b = "abcdefg\\n1234567!@#$%^&"  # 取消换行
str_c = r"abcdefg\n1234567!@#$%^&"  # 取消换行(r：取消转义)
print("str_a为：", str_a)
print("str_b为：", str_b)
print("str_c为：", str_c)
# 索引
str_d = "ABCDEFG"
print(str_d[0], str_d[6], str_d[-1], str_d[-7])  # 获取索引：str_d[元素],仅支持传入一个元素值
# 切片：str[起始元素索引:结束位置索引:步长]，起始元素索引和结束元素索引为前闭后开原则，即包含起始位置元素，不包含结束位置元素
"""
注：
    1、步长为正数时，起始位置默认在结束位置的左侧（或位置相同）；步长为负数时，起始位置在结束位置的右侧（或相同位置）
    2、步长默认为1
    3、进行切片操作时，根据步长确定切片的顺序是从左至右还是从右至左，起始位置和结束位置可能会导致空片，步长设置不合理也可能导致空片
    4、进行切片操作时，确保元素下标不能越界，比如str_e这个变量，下标从左至右范围为0到8，从右至左为-1到-9，越界则会报错
"""
str_e = "一二三四五六七八九"
print(str_e[:])  # 起始位置为空（默认第一个元素），结束位置索引为空（默认最后一个元素），步长也为空（默认为1），获取整个字符串的元素
print(str_e[1:])  # 从索引位置1开始，结束位置索引为空，步长为空，即获取索引下标为1的元素到最后一个元素
print(str_e[:5])  # 获取第一个元素到索引下标为5的元素
print(str_e[:-4])  # 获取第一个元素到索引为-4的元素
print(str_e[-7:-1:2])  # 起始位置为-7（包含），结束位置为-1（不包含），步长为2
print(str_e[::-1])  # 起始位置和结束位置为空，步长为-1（表明从右至左索引依次减1），翻转列表
print(str_e[-1:-8:-2])  # 从右至左依次减2
"""
4、列表（可变数据类型）：
    * 定义：中括号定义，有序所以支持索引和切片操作，里面的元素可以是Python6种数据类型的任意一种或多种以及布尔值
    * 索引：参考字符串索引
    * 切片：参考字符串切片
"""
list_a = [1, -1, 1.5, -1.0, "123", "Aavc", [1, 2, "qwe"], (1, 2, "fds"), {1: "q", 2: "w"}, 1 == 2, 1 + 2 == 3]
print(type(list_a))
print(list_a)
print(list_a[2:10:3])
print(list_a[-2:-11:-4])
