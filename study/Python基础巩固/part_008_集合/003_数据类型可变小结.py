#!/usr/bin/python3
# -*- coding:utf-8 -*-
"""
数据类型可变总结：
（一）、数值/字符串/元组/布尔值为不可变数据类型，一旦定义了，就是固定的内存空间对应的值不可变话，一旦发生变化，就会开辟另一个空间去储存
例：
a = 数值/字符串/元组；
b = 数值/字符串/元组；
a和b都指向同一个内存地址，如果b发生变化，则会切断原来的内存地址，重新分配一个空间去储存b的值

（二）、列表/集合/字典为可变数据类型，定义好了之后，固定的内存空间对应可变化的值，无论值怎么变化，对应的还是这个内存地址
例：
a = 列表/集合/字典；
b = 列表/集合/字典；
a和b指向不同的内存地址；如果使c = a，则c和a指向同一个内存地址，如果操作c改变了内存地址的值，则a同样也会发生改变
"""
print("*" * 20, "变量（数值）：值相等时，多个变量都指向------>同一个内存地址", "*" * 20)
a = 123
b = 123
print(id(a))
print(id(b))

print("*" * 20, "变量（字符串）：值相等时，多个变量都指向------>同一个内存地址", "*" * 20)
c = "abc"
d = "abc"
print(id(c))
print(id(d))

print("*" * 20, "变量（元组）：值相等时，多个变量都指向------>同一个内存地址", "*" * 20)
e = ("a", "b", "c")
f = ("a", "b", "c")
print(id(e))
print(id(f))

print("*" * 20, "变量（列表）：值相等时，多个变量都指向------>不同的内存地址", "*" * 20)
g = ["a", "b", "c"]
h = ["a", "b", "c"]
print(id(g))
print(id(h))

print("*" * 20, "变量（集合）：值相等时，多个变量都指向------>不同的内存地址", "*" * 20)
i = {1, "ab", True}
j = {1, "ab", True}
print(id(i))
print(id(j))

print("*" * 20, "变量（字典）：值相等时，多个变量都指向------>不同的内存地址", "*" * 20)
k = {"name": "李勇", "sex": "男"}
l = {"name": "李勇", "sex": "男"}
print(id(k))
print(id(l))


"""
总结：
1、按照储存对象多少：
    单个：数字（number）、字符串（string）
    多个：列表（list）、元组（tuple）、集合（set）、字典（dict）
    两个：布尔型（bool）
2、按照数据类型是否可变：
    可变（不可hash）：列表（list）、字典（dict）、集合（set）
    不可变（可hash）：数字（number）、字符串（string）、元组（tuple）、布尔型（bool）
3、按照访问方式
    通过"索引"访问：字符串（string）、列表（list）、元组（tuple）
    通过"key"访问：字典（dict）
    无序：集合（set）
"""