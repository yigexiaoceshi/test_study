#!/usr/bin/python3
# -*- coding:utf-8 -*-
"""
位运算符：按照bit位上的数字进行运算
& ： 类似and，得出的新的二进制数，输出对应的十进制数
| ： 类似or，得出的新的二进制数，输出对应的十进制数
^ : 异或，相同位数相同为0，不同为1，得出新的二进制数，输出对应的十进制数
~ :
<< ：
>> ：
"""
# 声明2个变量，分别赋值二进制数字
# &：且，相当于and
n1 = 0b0110  # 6
n2 = 0b0010  # 2
print(n1 & n2)
"""
运算机制：1为真，0为假
n1-------->0110
n2-------->0010
n1&n2----->0010  #相同位数比较，比如最后一位都是0，0and0还是0，结果为2
"""
print(5 & 9)  # 同理，比较出来的结果为0001，对应输出十进制数字为1
"""
5------>0101
9------>1001
5&9---->0001  #  结果为1
"""


# |：或
print(n1 | n2)  # or的关系，比较出来的结果为0110，对应输出结果为6
"""
n1-------->0110
n2-------->0010
n1|n2----->0110  # 结果为6
"""
print(5 | 9)  # 同理，输出结果为13
"""
5------>0101
9------>1001
5|9---->1101  #  结果为13
"""


# ^：异或
print(n1 ^ n2)  # 相同位数的数字比较，相同为0，不同为1，比较出来的数字为0100，输出十进制数字为4
print(5 ^ 9)  # 比较出来的二进制数字为1100，十进制数字为12
"""
运算机制：上下两个位数相同则为0，不同为1
n1-------->0110
n2-------->0010
n1^n2----->0100  # 结果为4

5------>0101
9------>1001
5^9---->1100  #  结果为12
"""

# 小知识点，一个bit为一个二进制的数位，一个字节byte(=8bit)，对应二进制数最大为11111111，所以对应的最大的十进制数就是255
# 整数一般占4个字节，即32个bit
"""注意：计算机都是以补码的形式存储数据"""
# ~ ：反码
print(~n1)  # n1的原码是0110，求0110对应的反码就是1001，而1001是所求答案存储在计算机中的补码，所以对应找出原码
print(~6)
print(~-5)  # 原码-5，原码的反码是1010
"""
正数：原码=反码=补码
负数：反码=原码的符号位不变，其余位取反
     补码=反码+1
n1---原码----------->0110
n1---反码----------->1001  # 此时得出答案的补码为1001
答案的反码（补码-1）-->1000  # 此时得出答案的反码
答案的原码----------->1111  # 最高位不变，其余位取反，答案为-7

-5-------原码------->1101
-5-------反码------->1010
答案的反码
"""
